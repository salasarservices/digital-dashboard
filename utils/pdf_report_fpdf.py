"""
utils/pdf_report_fpdf.py

Improved FPDF-based PDF report generator for the Salasar Services dashboard.

Usage:
    from utils.pdf_report_fpdf import generate_pdf_report_fpdf

    pdf_bytes_io = generate_pdf_report_fpdf(
        reporting_period = "Jul 2025",
        logo_url = "https://...logo.png",
        executive_kpis = [
            {"title":"Total Users", "value":"12,345", "delta_text":"+3.4% vs prev"},
        ],
        sections = [
            {
                "title": "Website Performance",
                "kpis": [{"title":"Total Clicks", "value":"123", "delta_text":"+4.5%"}],
                "table_df": None,
                "chart_fig": None,
                "notes": "Data source: Google Search Console"
            },
        ],
        footer_text = "Generated by Salasar Services Dashboard"
    )

Returns:
    io.BytesIO with PDF bytes (seek at 0)
"""

import io
import os
import tempfile
import requests
from fpdf import FPDF
from PIL import Image
import plotly.io as pio

# Helper: convert a Plotly figure to a temp PNG file (requires kaleido)
def _fig_to_temp_png(fig, scale=2):
    """
    Writes a plotly figure to a temporary PNG file and returns the file path.
    Caller should remove the file after use.
    """
    if fig is None:
        return None
    img_bytes = pio.to_image(fig, format="png", scale=scale)
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
    tmp.write(img_bytes)
    tmp.flush()
    tmp.close()
    return tmp.name


def _download_logo_to_temp(logo_url, timeout=8):
    """
    Downloads logo bytes (if possible) and writes to a temporary PNG file.
    Returns temp path or None.
    """
    if not logo_url:
        return None
    try:
        resp = requests.get(logo_url, timeout=timeout)
        resp.raise_for_status()
        img = Image.open(io.BytesIO(resp.content)).convert("RGBA")
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        img.save(tmp.name, format="PNG")
        tmp.close()
        return tmp.name
    except Exception:
        return None


def _safe_str(val):
    if val is None:
        return ""
    if isinstance(val, (int, float)):
        return f"{val:,}"
    return str(val)


class _PDF(FPDF):
    def header(self):
        # We'll inject a header per page in generate function as needed
        pass

    def footer(self):
        # Simple centered footer with page number
        self.set_y(-12)
        self.set_font("Arial", "I", 8)
        self.set_text_color(120, 120, 120)
        self.cell(0, 8, f"{self.footer_text or ''}  —  Page {self.page_no()}/{self.alias_nb_pages()}", align="C")


def generate_pdf_report_fpdf(
    reporting_period,
    logo_url=None,
    executive_kpis=None,
    sections=None,
    footer_text=None,
    author="Salasar Services",
    charts_scale=2
):
    """
    Build a multi-page PDF report and return BytesIO.

    Parameters:
      - reporting_period: human-readable period (e.g., 'Jul 2025')
      - logo_url: optional URL to a logo PNG
      - executive_kpis: list of dicts {title, value, delta_text}
      - sections: list of dicts {
            title: str,
            kpis: [ {title, value, delta_text}, ... ] (optional),
            table_df: pandas.DataFrame (optional),
            chart_fig: plotly figure (optional),
            notes: str (optional)
        }
      - footer_text: small string to show in footer
      - author: string for metadata
    Returns:
      io.BytesIO containing PDF bytes
    """

    tmp_files = []  # track temp files to clean up

    try:
        pdf = _PDF("P", "mm", "A4")
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.alias_nb_pages()
        pdf.footer_text = footer_text or "Generated by Salasar Services Reporting Dashboard"
        pdf.set_title(f"Digital Marketing Report - {reporting_period}")
        pdf.set_author(author)

        # Prepare logo if provided
        logo_tmp = _download_logo_to_temp(logo_url) if logo_url else None
        if logo_tmp:
            tmp_files.append(logo_tmp)

        # Cover page
        pdf.add_page()
        # Header: logo + title
        if logo_tmp:
            try:
                pdf.image(logo_tmp, x=15, y=12, w=42)
                pdf.set_xy(15+42+6, 20)
            except Exception:
                pdf.set_xy(15, 20)
        else:
            pdf.set_xy(15, 20)

        pdf.set_text_color(45, 68, 141)
        pdf.set_font("Arial", "B", 20)
        pdf.cell(0, 10, "Salasar Services — Digital Marketing Report", ln=1)
        pdf.ln(4)
        pdf.set_font("Arial", "", 11)
        pdf.set_text_color(70, 70, 70)
        pdf.cell(0, 6, f"Reporting period: {reporting_period}", ln=1)
        pdf.cell(0, 6, f"Generated on: {__import__('datetime').date.today().isoformat()}", ln=1)
        pdf.ln(6)

        # Executive summary KPIs (big)
        if executive_kpis:
            pdf.set_font("Arial", "B", 12)
            pdf.set_text_color(45, 68, 141)
            pdf.cell(0, 8, "Executive Summary", ln=1)
            pdf.ln(2)
            # layout KPIs in a row; compute width
            kcount = max(1, len(executive_kpis))
            page_width = pdf.w - pdf.l_margin - pdf.r_margin
            col_w = page_width / kcount - 4
            y0 = pdf.get_y()
            for k in executive_kpis:
                x = pdf.get_x()
                pdf.set_xy(x, y0)
                # Draw a light rounded rectangle-like visual box (simple rect)
                pdf.set_fill_color(245, 247, 255)
                pdf.rect(x, y0, col_w, 28, style="DF")
                pdf.set_xy(x + 4, y0 + 4)
                pdf.set_text_color(45, 68, 141)
                pdf.set_font("Arial", "B", 14)
                pdf.cell(col_w - 8, 6, _safe_str(k.get("title", "")), ln=2)
                pdf.set_font("Arial", "", 16)
                pdf.set_text_color(35, 35, 35)
                pdf.cell(col_w - 8, 8, _safe_str(k.get("value", "")), ln=2)
                pdf.set_font("Arial", "", 10)
                pdf.set_text_color(100, 140, 100 if (str(k.get("delta_text","")).startswith("+")) else (200, 60, 60) if (str(k.get("delta_text","")).startswith("-")) else 120)
                # delta may be short; place just below
                pdf.cell(col_w - 8, 6, _safe_str(k.get("delta_text", "")), ln=2)
                # Move X forward
                pdf.set_xy(x + col_w + 4, y0)
            # move cursor below the KPI row
            pdf.set_y(y0 + 32)
            pdf.ln(2)

        # Sections
        if not sections:
            sections = []

        for sec in sections:
            pdf.add_page()
            # Section title
            pdf.set_font("Arial", "B", 13)
            pdf.set_text_color(45, 68, 141)
            pdf.cell(0, 8, sec.get("title", "Section"), ln=1)
            pdf.ln(2)

            # KPIs inside section (if any)
            sec_kpis = sec.get("kpis") or []
            if sec_kpis:
                pdf.set_font("Arial", "", 11)
                page_width = pdf.w - pdf.l_margin - pdf.r_margin
                kcount = max(1, len(sec_kpis))
                col_w = page_width / kcount - 4
                y0 = pdf.get_y()
                for k in sec_kpis:
                    x = pdf.get_x()
                    pdf.set_xy(x, y0)
                    pdf.set_fill_color(250, 250, 250)
                    pdf.rect(x, y0, col_w, 22, style="DF")
                    pdf.set_xy(x + 4, y0 + 3)
                    pdf.set_font("Arial", "B", 12)
                    pdf.set_text_color(45, 68, 141)
                    pdf.cell(col_w - 8, 6, _safe_str(k.get("title", "")), ln=2)
                    pdf.set_font("Arial", "", 14)
                    pdf.set_text_color(35, 35, 35)
                    pdf.cell(col_w - 8, 7, _safe_str(k.get("value", "")), ln=2)
                    pdf.set_xy(x + col_w + 4, y0)
                pdf.set_y(y0 + 26)
                pdf.ln(2)

            # Chart (if present)
            chart_fig = sec.get("chart_fig")
            if chart_fig is not None:
                img_path = _fig_to_temp_png(chart_fig, scale=charts_scale)
                if img_path:
                    tmp_files.append(img_path)
                    # place image; keep margins
                    try:
                        # scale to page width minus margins
                        max_w = pdf.w - pdf.l_margin - pdf.r_margin
                        # insert image with left margin
                        pdf.image(img_path, x=pdf.l_margin, y=pdf.get_y(), w=max_w)
                        pdf.ln(60)
                    except Exception:
                        # fallback: skip image if something goes wrong
                        pdf.ln(4)
            # Table DataFrame (if present)
            df = sec.get("table_df")
            if df is not None:
                try:
                    # Render simple table: header row + up to N rows
                    pdf.set_font("Arial", "B", 10)
                    pdf.set_text_color(55, 55, 55)
                    # Prepare columns that fit: choose sensible widths
                    cols = list(df.columns)
                    # Determine widths proportional to page
                    page_w = pdf.w - pdf.l_margin - pdf.r_margin
                    col_w = page_w / max(1, len(cols))
                    # Header
                    for c in cols:
                        pdf.cell(col_w, 7, str(c), border=1, align="L")
                    pdf.ln()
                    pdf.set_font("Arial", "", 9)
                    max_rows = 22  # avoid huge tables on one page
                    for i, row in df.head(max_rows).iterrows():
                        for c in cols:
                            txt = str(row[c]) if not (row[c] is None) else ""
                            # wrap long text: FPDF has no auto-wrap inside cell; use multi_cell when needed
                            pdf.cell(col_w, 6, txt[:40], border=1)
                        pdf.ln()
                    if len(df) > max_rows:
                        pdf.set_font("Arial", "I", 9)
                        pdf.cell(0, 6, f"... ({len(df)-max_rows} more rows omitted)", ln=1)
                except Exception:
                    pdf.set_font("Arial", "", 9)
                    pdf.cell(0, 6, "Table could not be rendered.", ln=1)

            # Notes if present
            notes = sec.get("notes")
            if notes:
                pdf.ln(2)
                pdf.set_font("Arial", "", 10)
                pdf.set_text_color(90, 90, 90)
                pdf.multi_cell(0, 5, str(notes))

        # finalize: write to bytes
        pdf_bytes = pdf.output(dest="S").encode("latin1")
        bio = io.BytesIO(pdf_bytes)
        bio.seek(0)
        return bio

    finally:
        # cleanup temp files
        for f in tmp_files:
            try:
                os.unlink(f)
            except Exception:
                pass
